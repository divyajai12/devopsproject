pipeline {
  agent any

  stages {
    stage('Read and Increment Version') {
      steps {
        script {
          def version = readFile('version.txt').trim()
          echo "Current version: ${version}"

          def parts = version.tokenize('.')
          def major = parts[0].toInteger()
          def minor = parts[1].toInteger()
          def patch = parts[2].toInteger() + 1

          def newVersion = "${major}.${minor}.${patch}"
          echo "New version: ${newVersion}"

          writeFile file: 'version.txt', text: newVersion
          env.APP_VERSION = newVersion
        }
      }
    }

    stage('Build and Deploy') {
      steps {
        script {
          // Build and deploy your containers with the version
          sh 'docker-compose up -d --build'
        }
      }
    }

    stage('Health Check') {
      steps {
        script {
          def status = sh(script: 'curl -f http://localhost:3000/health', returnStatus: true)
          if (status != 0) {
            echo 'Health check failed! Rolling back...'
            // Stop current containers
            sh 'docker-compose down'
            // Redeploy previous stable version (implement this logic later if needed)
            sh 'docker-compose up -d --no-build'
            error('Deployment failed and rollback executed.')
          }
        }
      }
    }
  }

  post {
    success {
      emailext(
        subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: "Good news! The build succeeded.\n\nDetails: ${env.BUILD_URL}",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
    failure {
      emailext(
        subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: "Oops! The build failed.\n\nDetails: ${env.BUILD_URL}",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
  }
}
